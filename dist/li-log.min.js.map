{"version":3,"file":"li-log.min.js","sources":["../src/lib/utils.js","../src/lib/li-log-core.js"],"sourcesContent":["function copyDeep(baseObj) {\n    function cloneObject(obj) {\n        const clone = {};\n        const objKeys = Object.keys(obj);\n        let i = objKeys.length;\n\n        while (i) {\n            const key = objKeys[i];\n\n            if (typeof (obj[key]) === 'object' && obj[key] !== null) {\n                clone[key] = cloneObject(obj[key]);\n            } else {\n                clone[key] = obj[key];\n            }\n\n            i -= 1;\n        }\n\n        return clone;\n    }\n\n    const newObj = {};\n    const keys = Object.keys(baseObj);\n\n    let j = keys.length;\n\n    while (j) {\n        const key = keys[j];\n        const current = baseObj[key];\n\n        if (Array.isArray(current)) {\n            newObj[key] = current.slice(0);\n        } else if (typeof current === 'object') {\n            newObj[key] = cloneObject(current);\n        } else {\n            newObj[key] = current;\n        }\n\n        j -= 1;\n    }\n\n    return newObj;\n}\n\nfunction mergeOptions(baseOptions, userOptions) {\n    const resultOptions = copyDeep(baseOptions);\n    const keys = Object.keys(userOptions);\n\n    let i = keys.length;\n\n    while (i) {\n        const key = keys[i];\n\n        resultOptions[key] = userOptions[key];\n\n        i -= 1;\n    }\n\n    return resultOptions;\n}\n\nconst isBrowser = (() => {\n    try {\n        return Boolean(window);\n    } catch (e) {\n        return false;\n    }\n})();\n\nconst isNode = (() => {\n    try {\n        return Boolean(global);\n    } catch (e) {\n        return false;\n    }\n})();\n\nfunction pad(val) {\n    const length = 2;\n    let value = String(val);\n\n    while (value.length < length) {\n        value = `0${val}`;\n    }\n    return value;\n}\n\nfunction getTime() {\n    const date = new Date();\n    const hours = pad(date.getHours());\n    const minutes = pad(date.getMinutes());\n    const seconds = pad(date.getSeconds());\n\n    return `${hours}:${minutes}:${seconds}`;\n}\n\nconst utils = {\n    mergeOptions,\n    isBrowser,\n    isNode,\n    getTime,\n};\n\nexport default utils;\n","import DateTimeFormat from 'format-date-time';\nimport utils from './utils';\n\n// default browser text styles\nconst browserConsoleStyles = {\n    debug: 'font-browserStyle: italic; color: #1B2B34;',\n    info: 'color: #6699CC;',\n    warning: 'font-weight: bold; color: #AB7967;',\n    error: 'font-weight: bold; color: #E24825;',\n    critical: 'font-weight: bold; color: #FAFAFA; padding: 3px; background: linear-gradient(#D33106, #571402);',\n};\n\n// Stack trace format :\n// https://github.com/v8/v8/wiki/Stack%20Trace%20API\nconst stackReg = /at\\s+(.*)\\s+\\((.*):(\\d*):(\\d*)\\)/i;\nconst stackReg2 = /at\\s+()(.*):(\\d*):(\\d*)/i;\n\nfunction Log(userOptions) {\n    const { isBrowser, isNode, mergeOptions } = utils;\n    const baseOptions = {\n        level: 1, // info as default\n        coloredOutput: true,\n        outputMethodOnly: [],\n        showStackData: true,\n        logMethods: [\n            {\n                name: 'debug',\n                level: 0,\n                browserStyle: browserConsoleStyles.debug,\n            },\n            {\n                name: 'info',\n                level: 1,\n                browserStyle: browserConsoleStyles.info,\n            },\n            {\n                name: 'warning',\n                level: 2,\n                browserStyle: browserConsoleStyles.warning,\n            },\n            {\n                name: 'error',\n                level: 3,\n                browserStyle: browserConsoleStyles.error,\n            },\n            {\n                name: 'critical',\n                level: 4,\n                browserStyle: browserConsoleStyles.critical,\n            },\n        ],\n        transport: [\n            function finalLog(data) {\n                if (isBrowser) {\n                    if (baseOptions.coloredOutput) {\n                        console.log(data.message, data.browserStyle);\n                    } else {\n                        console.log(data.message);\n                    }\n                } else {\n                    console.log(data.message);\n                }\n            },\n        ],\n    };\n    let dateTimeFormatter;\n    let options = baseOptions;\n    let loggerDisabled = false;\n\n    if (isNode) {\n        dateTimeFormatter = new DateTimeFormat('HH:mm:ss');\n    }\n\n    if (typeof userOptions === 'object') {\n        options = mergeOptions(baseOptions, userOptions);\n    } else if (typeof userOptions === 'string' && userOptions === 'no-color') {\n        baseOptions.coloredOutput = false;\n    }\n\n    function log(logOptions, methodInfo, args) {\n        if (loggerDisabled\n            || methodInfo.level < logOptions.level\n            || (logOptions.outputMethodOnly.length\n                && !logOptions.outputMethodOnly.includes(methodInfo.name))) return;\n\n        let message;\n        let stackInfo = '';\n        const stack = {\n            method: '',\n            line: '',\n            file: '',\n        };\n\n        if (logOptions.showStackData) {\n            const stackMessage = new Error().stack.split('\\n').slice(3);\n            const stackDataString = stackMessage[0];\n            const stackData = stackReg.exec(stackDataString) || stackReg2.exec(stackDataString);\n\n            if (stackData && stackData.length === 5) {\n                const [msg, method, path, line] = stackData;\n                stack.message = msg;\n                stack.method = method;\n                stack.path = path;\n                stack.line = line;\n                stack.file = stack.path.split(/[\\\\/]/).pop();\n                stack.stack = stackMessage.join('\\n');\n            }\n\n            if (stack.method) {\n                stackInfo = ` | Message from: ${stack.file} at ${stack.method}() line:${stack.line}`;\n            } else {\n                stackInfo = ` | Message from: ${stack.file} at line:${stack.line}`;\n            }\n        }\n\n        if (isNode) {\n            message = `${dateTimeFormatter.now()} <${methodInfo.name}> ${args}${stackInfo}`;\n        } else {\n            message = `${utils.getTime()} <${methodInfo.name}> ${args}${stackInfo}`;\n        }\n\n        if (logOptions.coloredOutput) {\n            if (isBrowser) {\n                message = `%c${message}`;\n            } else if (isNode) {\n                message = `${message}`;\n            }\n        }\n\n        const data = {\n            message,\n            browserStyle: methodInfo.browserStyle,\n            nodeStyle: methodInfo.nodeStyle,\n        };\n\n        logOptions.transport.forEach((fn) => {\n            if (typeof fn === 'function') {\n                fn(data);\n            } else {\n                throw new Error('Transport item not a function');\n            }\n        });\n    }\n\n    options.logMethods.forEach((methodInfo) => {\n        if (methodInfo.level >= options.level) {\n            this[methodInfo.name] = (...args) => log(options, methodInfo, args);\n        } else {\n            this[methodInfo.name] = () => {\n            };\n        }\n    });\n\n    this.setLevel = (level) => {\n        if (Number.isInteger(level)) {\n            options.level = level;\n        } else if (typeof level === 'string') {\n            const methods = options.logMethods.filter(method => method.name === level);\n\n            if (Array.isArray(methods) && methods.length) {\n                options.level = methods[0].level;\n            }\n        } else {\n            console.log(`setLevel() level ${level} was not found in LiLog instance`);\n        }\n    };\n\n    this.disable = () => {\n        loggerDisabled = true;\n    };\n\n    this.outputOnly = (methods) => {\n        if (Array.isArray(methods)) {\n            options.outputMethodOnly = methods;\n        } else if (typeof methods === 'string') {\n            options.outputMethodOnly = [methods];\n        }\n    };\n\n    this.disableOutputOnlyOption = () => {\n        options.outputMethodOnly = [];\n    };\n}\n\nexport { Log as default };\n"],"names":["clone","objKeys","Object","keys","i","length","key","babelHelpers.typeof","obj","cloneObject","newObj","j","current","baseObj","Array","isArray","slice","value","isBrowser","window","isNode","global","utils","resultOptions","copyDeep","userOptions","date","Date","hours","pad","getHours","minutes","getMinutes","seconds","getSeconds","browserConsoleStyles","stackReg","stackReg2","loggerDisabled","methodInfo","level","logOptions","outputMethodOnly","includes","name","message","stackInfo","stack","showStackData","stackMessage","Error","split","stackDataString","stackData","exec","msg","method","path","line","file","pop","join","dateTimeFormatter","now","getTime","coloredOutput","data","browserStyle","nodeStyle","transport","forEach","mergeOptions","baseOptions","debug","info","warning","error","critical","log","options","logMethods","args","setLevel","Number","isInteger","methods","filter","disable","outputOnly","disableOutputOnlyOption"],"mappings":"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"}