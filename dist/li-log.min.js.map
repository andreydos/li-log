{"version":3,"file":"li-log.min.js","sources":["../src/lib/utils.js","../src/lib/li-log-core.js"],"sourcesContent":["function copyDeep(baseObj) {\n    function cloneObject(obj) {\n        const clone = {};\n        const objKeys = Object.keys(obj);\n        let i = objKeys.length;\n\n        while (i) {\n            const key = objKeys[i];\n\n            if (typeof (obj[key]) === 'object' && obj[key] !== null) {\n                clone[key] = cloneObject(obj[key]);\n            } else {\n                clone[key] = obj[key];\n            }\n\n            i -= 1;\n        }\n\n        return clone;\n    }\n\n    const newObj = {};\n    const keys = Object.keys(baseObj);\n\n    let j = keys.length;\n\n    while (j) {\n        const key = keys[j];\n        const current = baseObj[key];\n\n        if (Array.isArray(current)) {\n            newObj[key] = current.slice(0);\n        } else if (typeof current === 'object') {\n            newObj[key] = cloneObject(current);\n        } else {\n            newObj[key] = current;\n        }\n\n        j -= 1;\n    }\n\n    return newObj;\n}\n\nfunction mergeOptions(baseOptions, userOptions) {\n    const resultOptions = copyDeep(baseOptions);\n    const keys = Object.keys(userOptions);\n\n    let i = keys.length;\n\n    while (i) {\n        const key = keys[i];\n\n        resultOptions[key] = userOptions[key];\n\n        i -= 1;\n    }\n\n    return resultOptions;\n}\n\nconst isBrowser = (() => {\n    try {\n        return Boolean(window);\n    } catch (e) {\n        return false;\n    }\n})();\nconst isNode = (() => {\n    try {\n        return Boolean(global);\n    } catch (e) {\n        return false;\n    }\n})();\n\nconst utils = {\n    mergeOptions,\n    isBrowser,\n    isNode,\n};\n\nexport default utils;\n","import utils from './utils';\n\n// default browser text styles\nconst browserConsoleStyles = {\n    debug: 'font-browserStyle: italic; color: #1B2B34;',\n    info: 'color: #6699CC;',\n    warning: 'font-weight: bold; color: #AB7967;',\n    error: 'font-weight: bold; color: #E24825;',\n    critical: 'font-weight: bold; color: #FAFAFA; padding: 3px; background: linear-gradient(#D33106, #571402);',\n};\n\nfunction Log(userOptions) {\n    const { isBrowser, isNode, mergeOptions } = utils;\n    const baseOptions = {\n        level: 1, // info as default\n        coloredOutput: true,\n        logMethods: [\n            {\n                name: 'debug',\n                level: 0,\n                browserStyle: browserConsoleStyles.debug,\n            },\n            {\n                name: 'info',\n                level: 1,\n                browserStyle: browserConsoleStyles.info,\n            },\n            {\n                name: 'warning',\n                level: 2,\n                browserStyle: browserConsoleStyles.warning,\n            },\n            {\n                name: 'error',\n                level: 3,\n                browserStyle: browserConsoleStyles.error,\n            },\n            {\n                name: 'critical',\n                level: 4,\n                browserStyle: browserConsoleStyles.critical,\n            },\n        ],\n        transport: [\n            function finalLog(data) {\n                if (isBrowser) {\n                    if (baseOptions.coloredOutput) {\n                        console.log(data.message, data.browserStyle);\n                    } else {\n                        console.log(data.message);\n                    }\n                } else {\n                    console.log(data.message);\n                }\n            },\n        ],\n    };\n\n    let options = baseOptions;\n    let loggerDisabled = false;\n\n    if (typeof userOptions === 'object') {\n        options = mergeOptions(baseOptions, userOptions);\n    } else if (typeof userOptions === 'string' && userOptions === 'no-color') {\n        baseOptions.coloredOutput = false;\n    }\n\n    function log(logOptions, methodInfo, args) {\n        if (loggerDisabled || methodInfo.level < logOptions.level) return;\n\n        let message = `<${methodInfo.name}> ${args}`;\n\n        if (logOptions.coloredOutput) {\n            if (isBrowser) {\n                message = `%c${message}`;\n            } else if (isNode) {\n                message = `|li-log| ${message}`;\n            }\n        }\n\n        const data = {\n            message,\n            browserStyle: methodInfo.browserStyle,\n            nodeStyle: methodInfo.nodeStyle,\n        };\n\n        logOptions.transport.forEach((fn) => {\n            if (typeof fn === 'function') {\n                fn(data);\n            } else {\n                throw new Error('Transport item not a function');\n            }\n        });\n    }\n\n    options.logMethods.forEach((methodInfo) => {\n        if (methodInfo.level >= options.level) {\n            this[methodInfo.name] = (...args) => log(options, methodInfo, args);\n        } else {\n            this[methodInfo.name] = () => {};\n        }\n    });\n\n    this.setLevel = (level) => {\n        if (Number.isInteger(level)) {\n            options.level = level;\n        } else if (typeof level === 'string') {\n            const methods = options.logMethods.filter(method => method.name === level);\n            if (Array.isArray(methods) && methods.length) {\n                options.level = methods[0].level;\n            }\n        } else {\n            console.log(`setLevel() level ${level} was not found in LiLog instance`);\n        }\n    };\n\n    this.disable = () => {\n        loggerDisabled = true;\n    };\n}\n\nexport { Log as default };\n"],"names":["clone","objKeys","Object","keys","i","length","key","babelHelpers.typeof","obj","cloneObject","newObj","j","current","baseObj","Array","isArray","slice","isBrowser","window","isNode","global","utils","resultOptions","copyDeep","userOptions","browserConsoleStyles","loggerDisabled","methodInfo","level","logOptions","message","name","coloredOutput","data","browserStyle","nodeStyle","transport","forEach","Error","mergeOptions","baseOptions","debug","info","warning","error","critical","log","options","logMethods","args","setLevel","Number","isInteger","methods","filter","method","disable"],"mappings":"kLAAA,aAA2B,cACG,QAChBA,MACAC,EAAUC,OAAOC,IAAPD,IACZE,EAAIH,EAAQI,MAHM,IAKZ,IACAC,GAAML,SADN,CAGoB,QAAtBM,KAAQC,IAARD,GAA+C,IAAbC,OAHhC,CAIWC,EAAYD,IAAZC,CAJX,CAMWD,IANX,IASD,WAfU,OAqBjBE,MACAP,EAAOD,OAAOC,IAAPD,IAETS,EAAIR,EAAKE,MAxBU,IA0Bb,IACAC,GAAMH,KACNS,EAAUC,SAFV,CAIFC,MAAMC,OAAND,GAJE,CAKYF,EAAQI,KAARJ,CAAc,CAAdA,CALZ,CAMwB,QAAnB,0CAAA,CANL,CAOYH,IAPZ,MAYD,+sCAuBPQ,EAAa,UAAM,IACjB,SACeC,MADnB,CAEE,QAAU,UAHE,CAAC,GAObC,EAAU,UAAM,IACd,SACeC,MADnB,CAEE,QAAU,UAHD,CAAC,GAQVC,EAAQ,cAhCd,aAAgD,QACtCC,GAAgBC,KAChBpB,EAAOD,OAAOC,IAAPD,IAETE,EAAID,EAAKE,MAJ+B,IAMlC,IACAC,GAAMH,UAESqB,IAHf,IAKD,WAqBC,YAAA,SAAA,ECzERC,EAAuB,OAClB,4CADkB,MAEnB,iBAFmB,SAGhB,oCAHgB,OAIlB,oCAJkB,UAKf,iGALe,QAQ7B,YAA0B,kBAwDqB,MACnCC,GAAkBC,EAAWC,KAAXD,CAAmBE,EAAWD,WAEhDE,OAAcH,EAAWI,YAEzBF,EAAWG,oDAQTC,GAAO,UAAA,cAEKN,EAAWO,YAFhB,WAGEP,EAAWQ,SAHb,IAMFC,UAAUC,QAAQ,WAAQ,IACf,UAAd,0BAGM,IAAIC,MAAJ,CAAU,+BAAV,CAJd,eA1EIrB,EAAoCI,EAApCJ,UAAWE,EAAyBE,EAAzBF,OAAQoB,EAAiBlB,EAAjBkB,aACrBC,EAAc,OACT,CADS,iBAAA,YAGJ,CACR,MACU,OADV,OAEW,CAFX,cAGkBf,EAAqBgB,KAHvC,CADQ,CAMR,MACU,MADV,OAEW,CAFX,cAGkBhB,EAAqBiB,IAHvC,CANQ,CAWR,MACU,SADV,OAEW,CAFX,cAGkBjB,EAAqBkB,OAHvC,CAXQ,CAgBR,MACU,OADV,OAEW,CAFX,cAGkBlB,EAAqBmB,KAHvC,CAhBQ,CAqBR,MACU,UADV,OAEW,CAFX,cAGkBnB,EAAqBoB,QAHvC,CArBQ,CAHI,WA8BL,CACP,WAAwB,GAEZL,EAAYR,aAFA,SAGJc,IAAIb,EAAKH,QAASG,EAAKC,aAHnB,SAKJY,IAAIb,EAAKH,QALL,SAQRgB,IAAIb,EAAKH,QATlB,CAAA,CA9BK,EA6ChBiB,IACArB,KAEuB,QAAvB,0CAAA,CAlDkB,GAmDRa,MAnDQ,CAoDY,QAAvB,YAAmD,UAAhBf,IApDxB,KAqDNQ,gBArDM,IAoFdgB,WAAWX,QAAQ,WAAgB,GAE9BV,EAAWI,KAFmB,CACnCJ,EAAWC,KAAXD,EAAoBoB,EAAQnB,KADO,CAEX,sCAAIqB,+CAASH,SAArC,CAFmC,CAIX,UAAM,CAA9B,CAJR,EApFsB,MA4FjBI,SAAW,WAAW,IACnBC,OAAOC,SAAPD,MACQvB,YACL,IAAqB,QAAjB,UAAJ,CAA+B,IAC5ByB,GAAUN,EAAQC,UAARD,CAAmBO,MAAnBP,CAA0B,kBAAUQ,GAAOxB,IAAPwB,IAApC,CAAAR,EACZjC,MAAMC,OAAND,KAA0BuC,EAAQhD,MAFJ,KAGtBuB,MAAQyB,EAAQ,CAARA,EAAWzB,KAHG,CAA/B,CAAA,aAMKkB,6DAThB,CA5FsB,MAyGjBU,QAAU,UAAM,KAArB"}