(function(a,b){'object'==typeof exports&&'undefined'!=typeof module?module.exports=b():'function'==typeof define&&define.amd?define(b):a.LiLog=b()})(this,function(){'use strict';function a(a,c){for(var d,e=b(a),f=Object.keys(c),g=f.length-1;0<=g;g--)d=f[g],e[d]=c[d];return e}function b(a){function b(a){for(var d,e={},f=Object.keys(a),g=f.length-1;0<=g;g--)d=f[g],e[d]='object'===c(a[d])&&null!==a[d]?b(a[d]):a[d];return e}for(var d={},e=Object.keys(a),f=e.length-1;0<=f;f--){var g=e[f],h=a[g];d[g]=Array.isArray(h)?h.slice(0):'object'===('undefined'==typeof h?'undefined':c(h))?b(h):h}return d}var c='function'==typeof Symbol&&'symbol'==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&'function'==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?'symbol':typeof a},d=new Function('try {return this===window;}catch(e){ return false;}')(),e=new Function('try {return this===global;}catch(e){return false;}')(),f={debug:'font-browserStyle: italic; color: #1B2B34;',info:'color: #6699CC;',warning:'font-weight: bold; color: #AB7967;',error:'font-weight: bold; color: #E24825;',critical:'font-weight: bold; color: #FAFAFA; padding: 3px; background: linear-gradient(#D33106, #571402);'};return function(b){function c(a,b,c){if(!(b.level<a.level)){var d=b.name+' '+c;h?d='%c'+d:i&&(d='NODEJS '+d);var e={message:d,browserStyle:b.browserStyle,nodeStyle:b.nodeStyle};return a.transport.forEach(function(a){if('function'==typeof a)a(e);else throw new Error('Transport item not a function')}),e}}var g=this,h=d,i=e,j={level:1,logMethods:[{name:'debug',level:0,browserStyle:f.debug},{name:'info',level:1,browserStyle:f.info},{name:'warning',level:2,browserStyle:f.warning},{name:'error',level:3,browserStyle:f.error},{name:'critical',level:4,browserStyle:f.critical}],transport:[function(a){h&&console.log(a.message,a.browserStyle),i&&console.log(a.message)}]},k=b?a(j,b):j;k.logMethods.forEach(function(a){g[a.name]=a.level>=k.level?function(){for(var b=arguments.length,d=Array(b),e=0;e<b;e++)d[e]=arguments[e];return c(k,a,d)}:function(){}}),this.setLevel=function(a){if(Number.isInteger(a))k.level=a;else if('string'==typeof a){var b=k.logMethods.filter(function(b){return b.name===a});Array.isArray(b)&&b.length&&(k.level=b[0].level)}else console.log('setLevel() level '+a+' was not found in LiLog instance')}}});
//# sourceMappingURL=li-log.min.js.map
