{"version":3,"file":"li-log.min.js","sources":["../src/lib/utils.js","../src/lib/li-log-core.js"],"sourcesContent":["function mergeOptions(baseOptions, userOptions) {\r\n    \"use strict\";\r\n    const resultOptions = copyDeep(baseOptions),\r\n        keys = Object.keys(userOptions);\r\n\r\n    for (let i = keys.length - 1; i >= 0; i--) {\r\n        const key = keys[i];\r\n\r\n        resultOptions[key] = userOptions[key];\r\n    }\r\n\r\n    return resultOptions;\r\n}\r\n\r\nfunction copyDeep(baseObj) {\r\n    function cloneObject(obj) {\r\n        const clone = {};\r\n\r\n        const objKeys = Object.keys(obj);\r\n\r\n        for (let i = objKeys.length - 1; i >= 0; i--) {\r\n            const key = objKeys[i];\r\n            \r\n            if(typeof(obj[key])===\"object\" && obj[key] !== null) {\r\n                clone[key] = cloneObject(obj[key]);\r\n            } else {\r\n                clone[key] = obj[key];\r\n            }\r\n        }\r\n\r\n        return clone;\r\n    }\r\n\r\n    const newObj = {},\r\n        keys = Object.keys(baseObj);\r\n\r\n    for (let i = keys.length - 1; i >= 0; i--) {\r\n        const key = keys[i],\r\n            current = baseObj[key];\r\n        if (Array.isArray(current)) {\r\n            newObj[key] = current.slice(0);\r\n        } else if (typeof current === 'object') {\r\n            newObj[key] = cloneObject(current);\r\n        } else {\r\n            newObj[key] = current;\r\n        }\r\n    }\r\n\r\n    return newObj;\r\n}\r\n\r\nconst isBrowser = (new Function(\"try {return this===window;}catch(e){ return false;}\"))(),\r\n    isNode = (new Function(\"try {return this===global;}catch(e){return false;}\"))();\r\n\r\n\r\nexport {\r\n    mergeOptions,\r\n    isBrowser,\r\n    isNode\r\n}","import * as utils from './utils';\r\n\r\n// default browser text styles\r\nconst browserConsoleStyles = {\r\n    debug: \"font-browserStyle: italic; color: #1B2B34;\",\r\n    info: \"color: #6699CC;\",\r\n    warning: \"font-weight: bold; color: #AB7967;\",\r\n    error: \"font-weight: bold; color: #E24825;\",\r\n    critical: \"font-weight: bold; color: #FAFAFA; padding: 3px; background: linear-gradient(#D33106, #571402);\"\r\n};\r\n\r\nfunction Log(userOptions) {\r\n    const {isBrowser, isNode, mergeOptions} = utils,\r\n        baseOptions = {\r\n            level: 1, // info as default\r\n            logMethods: [\r\n                {\r\n                    name: 'debug',\r\n                    level: 0,\r\n                    browserStyle: browserConsoleStyles.debug\r\n                },\r\n                {\r\n                    name: 'info',\r\n                    level: 1,\r\n                    browserStyle: browserConsoleStyles.info\r\n                },\r\n                {\r\n                    name: 'warning',\r\n                    level: 2,\r\n                    browserStyle: browserConsoleStyles.warning\r\n                },\r\n                {\r\n                    name: 'error',\r\n                    level: 3,\r\n                    browserStyle: browserConsoleStyles.error\r\n                },\r\n                {\r\n                    name: 'critical',\r\n                    level: 4,\r\n                    browserStyle: browserConsoleStyles.critical\r\n                }\r\n            ],\r\n            transport: [\r\n                function (data) {\r\n                    if (isBrowser) {\r\n                        console.log(data.message, data.browserStyle);\r\n                    }\r\n                    if (isNode) {\r\n                        console.log(data.message);\r\n                    }\r\n                }\r\n            ],\r\n        };\r\n\r\n    const options = userOptions ? mergeOptions(baseOptions, userOptions) : baseOptions;\r\n\r\n    let loggerDisabled = false;\r\n\r\n    options.logMethods.forEach((methodInfo) => {\r\n        if (methodInfo.level >= options.level) {\r\n            this[methodInfo.name] = function (...args) {\r\n                return log(options, methodInfo, args);\r\n            };\r\n        } else {\r\n            this[methodInfo.name] = function () {};\r\n        }\r\n    });\r\n\r\n    this.setLevel = function (level) {\r\n        if (Number.isInteger(level)) {\r\n            options.level = level;\r\n        } else if (typeof level === 'string') {\r\n            const methods = options.logMethods.filter((method) => {\r\n                return method.name === level;\r\n            });\r\n            if (Array.isArray(methods) && methods.length) {\r\n                options.level = methods[0].level;\r\n            }\r\n        } else {\r\n            console.log(`setLevel() level ${level} was not found in LiLog instance`);\r\n        }\r\n    };\r\n\r\n    this.disable = function () {\r\n        loggerDisabled = true;\r\n    };\r\n\r\n    function log(options, methodInfo, args) {\r\n        if (loggerDisabled || methodInfo.level < options.level) return;\r\n\r\n        let message = `<${methodInfo.name}> ${args}`;\r\n\r\n        if (isBrowser) {\r\n            message = `%c${message}`;\r\n        } else if (isNode) {\r\n            message = `|li-log| ${message}`;\r\n        }\r\n\r\n        const data = {\r\n            message,\r\n            browserStyle: methodInfo.browserStyle,\r\n            nodeStyle: methodInfo.nodeStyle\r\n        };\r\n\r\n        options.transport.forEach((fn) => {\r\n            if (typeof fn === 'function') {\r\n                fn(data);\r\n            } else {\r\n                throw new Error('Transport item not a function');\r\n            }\r\n        });\r\n\r\n        return data;\r\n    }\r\n}\r\n\r\nexport { Log };"],"names":["resultOptions","copyDeep","keys","Object","i","length","userOptions","clone","objKeys","obj","cloneObject","newObj","key","current","baseObj","Array","isArray","slice","isBrowser","Function","isNode","browserConsoleStyles","loggerDisabled","methodInfo","level","options","message","name","data","browserStyle","nodeStyle","transport","forEach","Error","baseOptions","debug","info","warning","error","critical","log","mergeOptions","logMethods","args","setLevel","Number","isInteger","methods","filter","method","disable"],"mappings":"kLAAA,eAAgD,KAKvC,MAHCA,EAAgBC,IAGjB,CAFDC,EAAOC,OAAOD,IAAPC,GAEN,CAAIC,EAAIF,EAAKG,MAALH,CAAc,EAAQ,CAALE,IAAQA,MACtBF,UAESI,cAM7B,aAA2B,cACG,KAKjB,MAJCC,IAID,CAFCC,EAAUL,OAAOD,IAAPC,GAEX,CAAIC,EAAII,EAAQH,MAARG,CAAiB,EAAQ,CAALJ,IAAQA,MACzBI,UAEU,QAAnB,KAAOC,IAAP,GAA4C,IAAbA,QACjBC,EAAYD,IAAZC,EAEAD,kBAUpB,GAHCE,KAGD,CAFDT,EAAOC,OAAOD,IAAPC,GAEN,CAAIC,EAAIF,EAAKG,MAALH,CAAc,EAAQ,CAALE,IAAQA,IAAK,IACjCQ,GAAMV,KACRW,EAAUC,SAFyB,CAGnCC,MAAMC,OAAND,GAHmC,CAIrBF,EAAQI,KAARJ,CAAc,CAAdA,CAJqB,CAKT,QAAnB,0CAAA,CAL4B,CAMrBH,IANqB,4NAezCQ,EAAa,GAAIC,SAAJ,CAAa,qDAAb,IACfC,EAAU,GAAID,SAAJ,CAAa,oDAAb,ICjDRE,EAAuB,OAClB,4CADkB,MAEnB,iBAFmB,SAGhB,oCAHgB,OAIlB,oCAJkB,UAKf,iGALe,QAQ7B,YAA0B,kBA4EkB,MAChCC,GAAkBC,EAAWC,KAAXD,CAAmBE,EAAQD,WAE7CE,OAAcH,EAAWI,+CAQvBC,GAAO,UAAA,cAEKL,EAAWM,YAFhB,WAGEN,EAAWO,SAHb,WAMLC,UAAUC,QAAQ,WAAQ,IACZ,UAAd,0BAGM,IAAIC,MAAJ,CAAU,+BAAV,CAJd,iBA5FGf,IAAWE,IACdc,EAAc,OACH,CADG,YAEE,CACR,MACU,OADV,OAEW,CAFX,cAGkBb,EAAqBc,KAHvC,CADQ,CAMR,MACU,MADV,OAEW,CAFX,cAGkBd,EAAqBe,IAHvC,CANQ,CAWR,MACU,SADV,OAEW,CAFX,cAGkBf,EAAqBgB,OAHvC,CAXQ,CAgBR,MACU,OADV,OAEW,CAFX,cAGkBhB,EAAqBiB,KAHvC,CAhBQ,CAqBR,MACU,UADV,OAEW,CAFX,cAGkBjB,EAAqBkB,QAHvC,CArBQ,CAFF,WA6BC,CACP,WAAgB,YAEAC,IAAIZ,EAAKF,QAASE,EAAKC,aAFvB,YAKAW,IAAIZ,EAAKF,QANlB,CAAA,CA7BD,EAyCZD,EAAUnB,EAAcmC,MAAdnC,GAEZgB,OAEIoB,WAAWV,QAAQ,WAAgB,GAE9BT,EAAWI,KAFmB,CACnCJ,EAAWC,KAAXD,EAAoBE,EAAQD,KADO,CAEX,UAAmB,4BAANmB,+CAC1BH,SADX,CAFmC,CAMX,UAAY,CAApC,CANR,EA/CsB,MAyDjBI,SAAW,WAAiB,IACzBC,OAAOC,SAAPD,MACQrB,YACL,IAAqB,QAAjB,UAAJ,CAA+B,IAC5BuB,GAAUtB,EAAQiB,UAARjB,CAAmBuB,MAAnBvB,CAA0B,WAAY,OAC3CwB,GAAOtB,IAAPsB,IADK,CAAAxB,EAGZV,MAAMC,OAAND,KAA0BgC,EAAQ1C,MAJJ,KAKtBmB,MAAQuB,EAAQ,CAARA,EAAWvB,KALG,CAA/B,CAAA,aAQKgB,6DAXhB,CAzDsB,MAwEjBU,QAAU,UAAY,KAA3B"}